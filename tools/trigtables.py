import argparse, math, os


PROG = '...'

def parse_args():
    parser = argparse.ArgumentParser(description='generates trig lookup tables')
    parser.add_argument('-o', '--outfilestem', help='the output will be written to OUTFILESTEM.c and OUTFILESTEM.h')
    global PROG
    PROG = parser.prog
    return parser.parse_args()


def write_header(outfilename):
    lines = []
    lines.append(f'// GBA trig tables generated by {PROG}')
    lines.append(f'//\n')
    lines.append('#pragma once\n')

    lines.append(f'// 2.14 signed fixed point table of sin(i * 2pi/256)')
    lines.append(f'extern const short sintbl_256[];')

    lines.append('\n\n')

    with open(outfilename, 'wt') as f:
        f.write('\n'.join(lines))

def write_c(outfilename):
    lines = []
    lines.append(f'// GBA trig tables generated by {PROG}')
    lines.append(f'//\n')

    lines.append(f'const short sintbl_256[256] = ')
    lines.append('{')

    i = 0
    while i < 256:
        nexti = i + 16
        line = '\t'
        for ix in range(i, nexti):
            theta = (float(ix) * math.pi * 2.0 / 256)
            line += f'{int(math.sin(theta) * (1 << 14))}, '
        lines.append(line)
        i = nexti

    lines.append('};\n\n')

    with open(outfilename, 'wt') as f:
        f.write('\n'.join(lines))


def main():
    args = parse_args()

    # for simplicity of Makefiles, allow the outfilestem to include the .c/.h suffix
    outfilestem = os.path.splitext(args.outfilestem)[0]

    write_header(outfilestem+'.h')
    write_c(outfilestem+'.c')



if __name__ == '__main__':
    main()